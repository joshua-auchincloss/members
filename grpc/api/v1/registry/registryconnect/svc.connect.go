// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/registry/svc.proto

package registryconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	common "members/grpc/api/v1/common"
	_ "members/grpc/api/v1/registry"
	pkg "members/grpc/api/v1/registry/pkg"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// RegistryName is the fully-qualified name of the Registry service.
	RegistryName = "members.v1.registry.svc.Registry"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RegistryRegisterVersionProcedure is the fully-qualified name of the Registry's RegisterVersion
	// RPC.
	RegistryRegisterVersionProcedure = "/members.v1.registry.svc.Registry/RegisterVersion"
)

// RegistryClient is a client for the members.v1.registry.svc.Registry service.
type RegistryClient interface {
	RegisterVersion(context.Context, *connect_go.Request[pkg.NewVersionRequest]) (*connect_go.Response[common.ProtoMeta], error)
}

// NewRegistryClient constructs a client for the members.v1.registry.svc.Registry service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRegistryClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RegistryClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &registryClient{
		registerVersion: connect_go.NewClient[pkg.NewVersionRequest, common.ProtoMeta](
			httpClient,
			baseURL+RegistryRegisterVersionProcedure,
			opts...,
		),
	}
}

// registryClient implements RegistryClient.
type registryClient struct {
	registerVersion *connect_go.Client[pkg.NewVersionRequest, common.ProtoMeta]
}

// RegisterVersion calls members.v1.registry.svc.Registry.RegisterVersion.
func (c *registryClient) RegisterVersion(ctx context.Context, req *connect_go.Request[pkg.NewVersionRequest]) (*connect_go.Response[common.ProtoMeta], error) {
	return c.registerVersion.CallUnary(ctx, req)
}

// RegistryHandler is an implementation of the members.v1.registry.svc.Registry service.
type RegistryHandler interface {
	RegisterVersion(context.Context, *connect_go.Request[pkg.NewVersionRequest]) (*connect_go.Response[common.ProtoMeta], error)
}

// NewRegistryHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRegistryHandler(svc RegistryHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	registryRegisterVersionHandler := connect_go.NewUnaryHandler(
		RegistryRegisterVersionProcedure,
		svc.RegisterVersion,
		opts...,
	)
	return "/members.v1.registry.svc.Registry/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RegistryRegisterVersionProcedure:
			registryRegisterVersionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRegistryHandler returns CodeUnimplemented from all methods.
type UnimplementedRegistryHandler struct{}

func (UnimplementedRegistryHandler) RegisterVersion(context.Context, *connect_go.Request[pkg.NewVersionRequest]) (*connect_go.Response[common.ProtoMeta], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("members.v1.registry.svc.Registry.RegisterVersion is not implemented"))
}
