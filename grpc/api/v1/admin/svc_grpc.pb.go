// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/admin/svc.proto

package admin

import (
	context "context"
	common "members/grpc/api/v1/common"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Admin_Empty_FullMethodName           = "/members.v1.registry.svc.Admin/Empty"
	Admin_DescribeCluster_FullMethodName = "/members.v1.registry.svc.Admin/DescribeCluster"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	Empty(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.Empty, error)
	DescribeCluster(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (Admin_DescribeClusterClient, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) Empty(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, Admin_Empty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DescribeCluster(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (Admin_DescribeClusterClient, error) {
	stream, err := c.cc.NewStream(ctx, &Admin_ServiceDesc.Streams[0], Admin_DescribeCluster_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &adminDescribeClusterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Admin_DescribeClusterClient interface {
	Recv() (*common.Member, error)
	grpc.ClientStream
}

type adminDescribeClusterClient struct {
	grpc.ClientStream
}

func (x *adminDescribeClusterClient) Recv() (*common.Member, error) {
	m := new(common.Member)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	Empty(context.Context, *common.Empty) (*common.Empty, error)
	DescribeCluster(*common.Empty, Admin_DescribeClusterServer) error
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) Empty(context.Context, *common.Empty) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Empty not implemented")
}
func (UnimplementedAdminServer) DescribeCluster(*common.Empty, Admin_DescribeClusterServer) error {
	return status.Errorf(codes.Unimplemented, "method DescribeCluster not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_Empty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Empty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_Empty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Empty(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DescribeCluster_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServer).DescribeCluster(m, &adminDescribeClusterServer{stream})
}

type Admin_DescribeClusterServer interface {
	Send(*common.Member) error
	grpc.ServerStream
}

type adminDescribeClusterServer struct {
	grpc.ServerStream
}

func (x *adminDescribeClusterServer) Send(m *common.Member) error {
	return x.ServerStream.SendMsg(m)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "members.v1.registry.svc.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Empty",
			Handler:    _Admin_Empty_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DescribeCluster",
			Handler:       _Admin_DescribeCluster_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/admin/svc.proto",
}
