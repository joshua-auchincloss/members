// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/admin/svc.proto

package adminconnect

import (
	context "context"
	errors "errors"
	_ "members/grpc/api/v1/admin"
	common "members/grpc/api/v1/common"
	http "net/http"
	strings "strings"

	connect_go "github.com/bufbuild/connect-go"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AdminName is the fully-qualified name of the Admin service.
	AdminName = "members.v1.registry.svc.Admin"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdminEmptyProcedure is the fully-qualified name of the Admin's Empty RPC.
	AdminEmptyProcedure = "/members.v1.registry.svc.Admin/Empty"
	// AdminDescribeClusterProcedure is the fully-qualified name of the Admin's DescribeCluster RPC.
	AdminDescribeClusterProcedure = "/members.v1.registry.svc.Admin/DescribeCluster"
)

// AdminClient is a client for the members.v1.registry.svc.Admin service.
type AdminClient interface {
	Empty(context.Context, *connect_go.Request[common.Empty]) (*connect_go.Response[common.Empty], error)
	DescribeCluster(context.Context, *connect_go.Request[common.Empty]) (*connect_go.ServerStreamForClient[common.Member], error)
}

// NewAdminClient constructs a client for the members.v1.registry.svc.Admin service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AdminClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &adminClient{
		empty: connect_go.NewClient[common.Empty, common.Empty](
			httpClient,
			baseURL+AdminEmptyProcedure,
			opts...,
		),
		describeCluster: connect_go.NewClient[common.Empty, common.Member](
			httpClient,
			baseURL+AdminDescribeClusterProcedure,
			opts...,
		),
	}
}

// adminClient implements AdminClient.
type adminClient struct {
	empty           *connect_go.Client[common.Empty, common.Empty]
	describeCluster *connect_go.Client[common.Empty, common.Member]
}

// Empty calls members.v1.registry.svc.Admin.Empty.
func (c *adminClient) Empty(ctx context.Context, req *connect_go.Request[common.Empty]) (*connect_go.Response[common.Empty], error) {
	return c.empty.CallUnary(ctx, req)
}

// DescribeCluster calls members.v1.registry.svc.Admin.DescribeCluster.
func (c *adminClient) DescribeCluster(ctx context.Context, req *connect_go.Request[common.Empty]) (*connect_go.ServerStreamForClient[common.Member], error) {
	return c.describeCluster.CallServerStream(ctx, req)
}

// AdminHandler is an implementation of the members.v1.registry.svc.Admin service.
type AdminHandler interface {
	Empty(context.Context, *connect_go.Request[common.Empty]) (*connect_go.Response[common.Empty], error)
	DescribeCluster(context.Context, *connect_go.Request[common.Empty], *connect_go.ServerStream[common.Member]) error
}

// NewAdminHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminHandler(svc AdminHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	adminEmptyHandler := connect_go.NewUnaryHandler(
		AdminEmptyProcedure,
		svc.Empty,
		opts...,
	)
	adminDescribeClusterHandler := connect_go.NewServerStreamHandler(
		AdminDescribeClusterProcedure,
		svc.DescribeCluster,
		opts...,
	)
	return "/members.v1.registry.svc.Admin/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdminEmptyProcedure:
			adminEmptyHandler.ServeHTTP(w, r)
		case AdminDescribeClusterProcedure:
			adminDescribeClusterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdminHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminHandler struct{}

func (UnimplementedAdminHandler) Empty(context.Context, *connect_go.Request[common.Empty]) (*connect_go.Response[common.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("members.v1.registry.svc.Admin.Empty is not implemented"))
}

func (UnimplementedAdminHandler) DescribeCluster(context.Context, *connect_go.Request[common.Empty], *connect_go.ServerStream[common.Member]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("members.v1.registry.svc.Admin.DescribeCluster is not implemented"))
}
