version: "3"
env:
  run: go run ./cli
  flags: --tls --debug
tasks:
  kv:
    cmds:
      - docker run -d
        -v /usr/share/ca-certificates/:/Users/joshuaauchincloss/Movies/members/test_certs
        -p 4001:4001 -p 2380:2380 -p 2379:2379
        --name etcd quay.io/coreos/etcd:v2.3.8
        -name etcd0
        -advertise-client-urls http://localhost:2379,http://localhost:4001
        -listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001
        -initial-advertise-peer-urls http://localhost:2380
        -listen-peer-urls http://0.0.0.0:2380
        -initial-cluster-token etcd-cluster-1
        -initial-cluster etcd0=http://localhost:2380
        -initial-cluster-state new
  ca:
    dir: test_certs
    cmds:
      - openssl genrsa -aes256 -out ca-key.pem 4096
      - openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem

  cert:
    dir: test_certs
    cmds:
      - task: ca
      - openssl genrsa -out client-key.pem 4096
      - openssl req -subj '/CN=localhost' -new -key client-key.pem -out client.csr
      - echo subjectAltName = IP:127.0.0.1,DNS:localhost > extfile.cnf
      - openssl x509 -req -days 365 -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out client-cert.pem -extfile extfile.cnf

  dev-deps:
    cmds:
      - pip install pre-commit
      - go install github.com/go-critic/go-critic/cmd/gocritic@latest

  precommit:
    cmds:
      - task: proto
      - pre-commit run --all-files

  proto:
    cmds:
      - rm -rf ./grpc
      - buf generate

  mysql:
    cmds:
      - docker run
        -d
        --name=mysql
        -p 4900:4900
        --env="MYSQL_TCP_PORT=4900"
        --env="MYSQL_ROOT_PASSWORD=mypassword"
        mysql

  postgres:
    cmds:
      - docker run
        -d --name postgres
        -e PGDATA=/var/lib/postgresql/data/pgdata
        -e POSTGRES_PASSWORD=postgres
        -p 5432:5432
        postgres

  dgraph:
    cmds:
      - docker run --name dgraph
        -d -p "8080:8080" -p "9080:9080"
        -v $(pwd)/data/dgraph:/dgraph dgraph/standalone:latest

  neo4j:
    cmds:
      - docker run -d
        -p 7474:7474 -p 7687:7687
        -v $HOME/neo4j/data:/data
        neo4j

  postgres-schema:
    dotenv:
      - env/postgres.env
    cmds:
      - $run database schema

  mysql-schema:
    dotenv:
      - env/mysql.env
    cmds:
      - $run schema

  memory-schema:
    dotenv:
      - env/sqlite.env
    cmds:
      - $run schema

  cluster:
    env:
      CONFIG: ./env/client.yaml
    dotenv:
      - env/tls.env
    cmds:
      - $run cluster start --config $CONFIG

  health:
    dotenv:
      - env/tls.env
      - env/client.env
    cmds:
      - $run cluster health
        $flags

  list:
    env:
      CONFIG: env/client.yaml
    dotenv:
      - env/tls.env
      - env/client.env
    cmds:
      - $run cluster describe
        $flags

  graph-cluster:
    dotenv:
      - env/dgraph.env
      # - env/tls.env
      - env/a.env
    cmds:
      - task cluster

  neo4j-cluster:
    dotenv:
      - env/neo4j.env
      # - env/tls.env
      - env/a.env
    cmds:
      - task cluster


  postgres-cluster:
    dotenv:
      - env/postgres.env
    cmds:
      - task cluster

  postgres-cluster-a:
    env:
      CONFIG: env/a.yaml
    # dotenv:

    # - env/a.env
    cmds:
      - task postgres-cluster

  postgres-cluster-b:
    env:
      CONFIG: env/b.yaml
    # dotenv:
    #   - env/b.env
    cmds:
      - task postgres-cluster

  memory-cluster:
    dotenv:
      - env/sqlite.env
      - env/b.env
    cmds:
      - task cluster

  mysql-cluster:
    dotenv:
      - env/mysql.env
      - env/a.env
    cmds:
      - task cluster

  tidy:
    cmds:
      - go mod tidy

  prototest:
    dir: test
    cmds:
      - buf generate
